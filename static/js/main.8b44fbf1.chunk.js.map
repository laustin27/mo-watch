{"version":3,"sources":["BarkLogRow.js","BarkLog.js","App.js","reportWebVitals.js","index.js"],"names":["BarkLogRow","props","className","startTime","endTime","BarkLog","class","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","React","useState","setTestValue","database","ref","get","then","snap","val","src","onClick","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAYeA,MAVf,SAAoBC,GAChB,OACE,sBAAKC,UAAU,qBAAf,UACE,sBAAMA,UAAU,gBAAhB,mBACA,sBAAMA,UAAU,iBAAhB,SAAkCD,EAAME,YACxC,sBAAMD,UAAU,eAAhB,SAAgCD,EAAMG,cCa/BC,MAhBf,SAAiBJ,GACf,OACE,sBAAKK,MAAM,qBAAX,UACE,cAAC,EAAD,CAAYH,UAAU,OAAOC,QAAQ,aACrC,cAAC,EAAD,CAAYD,UAAU,QAAQC,QAAQ,aACtC,cAAC,EAAD,CAAYD,UAAU,OAAOC,QAAQ,aACrC,cAAC,EAAD,CAAYD,UAAU,OAAOC,QAAQ,cACrC,cAAC,EAAD,CAAYD,UAAU,QAAQC,QAAQ,aACtC,cAAC,EAAD,CAAYD,UAAU,OAAOC,QAAQ,aACrC,cAAC,EAAD,CAAYD,UAAU,QAAQC,QAAQ,aACtC,cAAC,EAAD,CAAYD,UAAU,OAAOC,QAAQ,cACrC,cAAC,EAAD,CAAYD,UAAU,OAAOC,QAAQ,iB,yBCK3CG,IAASC,cAZc,CACrBC,OAAQ,0CACRC,WAAY,2BACZC,YAAa,+CACbC,UAAW,WACXC,cAAe,uBACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAiCFC,MA3Bf,WACE,MAAkCC,IAAMC,WAAxC,mBAAkBC,GAAlB,WAWA,OATAb,IAASc,WACRC,IAAI,WACJC,MACAC,MAAK,SAAAC,GAAI,OAAIL,EAAaK,EAAKC,UAO9B,qCACE,iCACE,qBAAKC,IAAI,oBAEX,qBAAKzB,UAAU,OAAf,SACE,cAAC,EAAD,MAEF,iCACE,wBAAQ0B,QAbd,WACEC,MAAM,sBAYsB3B,UAAU,UAAlC,yBC/BO4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8b44fbf1.chunk.js","sourcesContent":["import './BarkLogRow.css';\n\nfunction BarkLogRow(props) {\n    return (\n      <div className=\"bark-row-container\">\n        <span className=\"bark-row-text\">Bark!</span>\n        <span className=\"bark-row-start\">{props.startTime}</span>\n        <span className=\"bark-row-end\">{props.endTime}</span>\n      </div>\n    )\n}\n\nexport default BarkLogRow;\n","import React from 'react'\nimport './BarkLog.css';\nimport BarkLogRow from './BarkLogRow.js'\n\nfunction BarkLog(props) {\n  return (\n    <div class=\"bark-log-container\">\n      <BarkLogRow startTime=\"test\" endTime=\"whatever\" />\n      <BarkLogRow startTime=\"test1\" endTime=\"whatever\" />\n      <BarkLogRow startTime=\"test\" endTime=\"whatever\" />\n      <BarkLogRow startTime=\"test\" endTime=\"whatever4\" />\n      <BarkLogRow startTime=\"test4\" endTime=\"whatever\" />\n      <BarkLogRow startTime=\"test\" endTime=\"whatever\" />\n      <BarkLogRow startTime=\"test5\" endTime=\"whatever\" />\n      <BarkLogRow startTime=\"test\" endTime=\"whatever4\" />\n      <BarkLogRow startTime=\"test\" endTime=\"whatever\" />\n    </div>\n  );\n}\n\nexport default BarkLog;\n","import React from 'react'\nimport BarkLog from './BarkLog';\nimport firebase from 'firebase/app'\nimport \"firebase/database\"\nimport './App.css'\nimport './Button.css'\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLYuScmM2f7tn458Ue9TiWVS5FnuCExfQ\",\n  authDomain: \"mo-watch.firebaseapp.com\",\n  databaseURL: \"https://mo-watch-default-rtdb.firebaseio.com\",\n  projectId: \"mo-watch\",\n  storageBucket: \"mo-watch.appspot.com\",\n  messagingSenderId: \"86065285680\",\n  appId: \"1:86065285680:web:eb770abf0d22044715bbf5\",\n  measurementId: \"G-TFCK2JPGGG\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  const [testValue, setTestValue] = React.useState();\n\n  firebase.database()\n  .ref(\"/object\")\n  .get()\n  .then(snap => setTestValue(snap.val()));\n\n  function clear() {\n    alert('clear coming soon');\n  }\n\n  return (\n    <>\n      <header>\n        <img src=\"./MoWatch.png\" />\n      </header>\n      <div className=\"body\">\n        <BarkLog />\n      </div>\n      <footer>\n        <button onClick={clear} className=\"primary\">Clear</button>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}