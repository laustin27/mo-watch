{"version":3,"sources":["NoiseEvent.js","moBounce2.gif","NoiseEventList.js","App.js","reportWebVitals.js","index.js"],"names":["NoiseEvent","props","isLoud","volume","isMedium","isQuiet","iconColor","text","timestampMillis","timestampMinutes","timestampSeconds","timestampDate","Date","startTime","getTime","className","style","display","flexDirection","paddingRight","paddingLeft","fontSize","alignItems","width","marginRight","icon","faExclamationCircle","color","fixedWidth","toLocaleTimeString","key","formatTime","data","dataString","toString","NoiseEventList","content","error","faFrown","loading","src","moBounce","height","marginTop","values","length","map","noiseEvent","index","LoudNoiseHappened","MediumNoiseHappened","QuietNoiseHappened","NoiseTimestampMinute","NoiseTimestampSecond","faSmileBeam","faQuestion","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","dateOptions","year","month","day","StatsDropdownHeader","cursor","justifyContent","boxShadow","dropdownOpen","faCaretUp","faCaretDown","App","useObjectVal","database","ref","transform","val","value","useListVals","React","useState","summary","setSummary","setDropdownOpen","useRef","at","useStopwatch","autoStart","seconds","minutes","hours","days","reset","useEffect","quietBarks","mediumBarks","loudBarks","firstBarkTimeMinutes","firstBarkTimeSeconds","offsetTimestamp","NoiseTimestampSeconds","toLocaleDateString","trigger","open","handleTriggerClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.784f46fa.chunk.js","sourcesContent":["import './NoiseEvent.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\n\nfunction NoiseEvent(props) {\n    const isLoud = props.volume == 'loud';\n    const isMedium = props.volume == 'medium';\n    const isQuiet = props.volume == 'quiet';\n\n    const iconColor = isLoud ? 'red' : (isMedium ? 'yellow' : (isQuiet ? 'green' : ''));\n    const text = isLoud ? 'BIG BARK!' : (isMedium ? 'Bark' : (isQuiet ? 'baby bark' : ''));\n\n    const timestampMillis = (props.timestampMinutes*6000) + (props.timestampSeconds*1000);\n    const timestampDate = new Date(props.startTime.getTime() + timestampMillis);\n\n    return (\n      <div>\n        <div className=\"noise-event-container\" style={{display: 'flex', flexDirection: 'row', paddingRight: '1rem', paddingLeft: '1rem', fontSize: '0.75rem', alignItems: 'center'}}>\n          <div style={{display: 'flex', flexDirection: 'row', width: '33%', marginRight: '1rem'}}>\n            <FontAwesomeIcon icon={faExclamationCircle} style={{marginRight: '1rem', color: iconColor, fontSize: '1rem'}} fixedWidth/>\n            <span className=\"noise-event-text\">{text}</span>\n          </div>\n          <div key={props.key} style={{display: 'flex', flexDirection: 'column', width: '67%'}}>\n            <div>{'Occurred at ' + timestampDate.toLocaleTimeString('en-US') }</div>\n            <div>{'after ' + (props?.timestampMinutes > 1 ? props?.timestampMinutes + (props?.timestampMinutes == 1 ? ' minute' : ' minutes') + ' and ' : '') + props?.timestampSeconds + ' seconds'}</div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default NoiseEvent;\n","export default __webpack_public_path__ + \"static/media/moBounce2.b228a1dc.gif\";","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\nimport './NoiseEventList.css';\nimport NoiseEvent from './NoiseEvent.js'\nimport { faSmileBeam, faFrown, faHourglass, faQuestion } from '@fortawesome/free-solid-svg-icons'\nimport { useListVals } from 'react-firebase-hooks/database';\nimport moBounce from './moBounce2.gif'\n\nfunction formatTime(data) {\n  let dataString = data.toString();\n\n  return dataString ?? null;\n}\n\nfunction NoiseEventList(props) {\n  let content;\n  if (props.error) {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faFrown} className=\"big-icon\"/>\n        <h1>Something went wrong</h1>\n      </div>\n  } else if (props.loading) {\n    content = \n      <div className=\"message-container\">\n        <img src={moBounce} style={{height: '70px', width: '70px'}}></img>\n        <h2 style={{marginTop: '0'}}>Loading...</h2>\n      </div>\n  } else if (props.values && props.values.length > 0) {\n    content = \n      props.values?.map((noiseEvent, index) => { \n        const volume = noiseEvent.LoudNoiseHappened == 1 \n                        ? 'loud' \n                        : (\n                            noiseEvent.MediumNoiseHappened == 1\n                            ? 'medium' \n                            : (\n                              noiseEvent.QuietNoiseHappened == 1 ? 'quiet' : ''\n                              )\n                          );\n        return (\n          <NoiseEvent \n            key = {index}\n            volume={volume}\n            timestampMinutes={formatTime(noiseEvent.NoiseTimestampMinute)}\n            timestampSeconds={formatTime(noiseEvent.NoiseTimestampSecond)}\n            startTime={props.startTime}\n          />\n        )\n      });\n  } else if (props.values.length == 0) {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faSmileBeam} className=\"big-icon\"/>\n        <h1>Hooray!!</h1>\n        <span>No barks have happened yet</span>\n      </div>\n  } else {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faQuestion} className=\"big-icon\"/>\n        <h1>Not Sure</h1>\n        <span>This is embarassing... I don't know what to display</span>\n      </div>\n  }\n\n  return (\n    <div>\n      { content }\n    </div>\n  );\n}\n\nexport {formatTime, NoiseEventList}\n","import React from 'react'\nimport firebase from 'firebase/app'\nimport \"firebase/database\"\nimport './App.css'\nimport './Button.css'\nimport { useListVals } from 'react-firebase-hooks/database';\nimport { useObjectVal } from 'react-firebase-hooks/database';\nimport Collapsible from 'react-collapsible';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport {formatTime, NoiseEventList} from './NoiseEventList';\nimport { useStopwatch } from 'react-timer-hook';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLYuScmM2f7tn458Ue9TiWVS5FnuCExfQ\",\n  authDomain: \"mo-watch.firebaseapp.com\",\n  databaseURL: \"https://mo-watch-default-rtdb.firebaseio.com\",\n  projectId: \"mo-watch\",\n  storageBucket: \"mo-watch.appspot.com\",\n  messagingSenderId: \"86065285680\",\n  appId: \"1:86065285680:web:eb770abf0d22044715bbf5\",\n  measurementId: \"G-TFCK2JPGGG\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst dateOptions = {year: 'numeric', month: 'long', day: 'numeric' };\n\nfunction StatsDropdownHeader(props) {\n  return (\n    <span style={{paddingLeft: '1rem', alignItems: 'center', height: '8vh', display: 'flex', cursor: 'pointer', justifyContent: 'space-between', boxShadow: '0px 0px 6px 0 #000'}}>\n      Stats\n      <FontAwesomeIcon icon={props.dropdownOpen ? faCaretUp : faCaretDown} style={{paddingRight: '1rem'}}/>\n    </span>\n  )\n}\n\nfunction App() {\n  const [value] = useObjectVal(\n    firebase.database().ref(\"/StartTime\"),\n    {\n      transform: (val) => (new Date(val))\n    }\n  );\n\n  const [values, loading, error] = useListVals(firebase.database().ref(\"/NoiseEvents\"));\n  const [summary, setSummary] = React.useState();\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n  const lastValueRef = React.useRef(values?.at(values.length - 1));\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    reset,\n  } = useStopwatch({ \n      autoStart: true\n  });\n\n  React.useEffect(() => {\n    let quietBarks  = 0;\n    let mediumBarks = 0;\n    let loudBarks   = 0;\n    let firstBarkTimeMinutes = null;\n    let firstBarkTimeSeconds = null;\n\n    if (values?.length > 0) {\n      values?.map((noiseEvent, index) => { \n        if (noiseEvent.LoudNoiseHappened == 1) {\n          loudBarks++;\n        } \n        else if (noiseEvent.MediumNoiseHappened == 1) {\n          mediumBarks++;\n        }\n        else if (noiseEvent.QuietNoiseHappened == 1) {\n          quietBarks++;\n        }\n\n        if (index == 0) {\n          firstBarkTimeMinutes = formatTime(noiseEvent.NoiseTimestampMinute);\n          firstBarkTimeSeconds = formatTime(noiseEvent.NoiseTimestampSecond);\n        }\n\n        if (index == values.length - 1) {\n          // const timestampMillis = (noiseEvent.NoiseTimestampMinute*6000) + (noiseEvent.NoiseTimestampSeconds*1000);\n          // const timestampDate = new Date(value.getTime() + timestampMillis);\n          // const secondsSinceLastBark = new Date().getSeconds() - noiseEvent.NoiseTimestampMinute*60 + noiseEvent.NoiseTimestampSeconds;\n\n          reset({\n            offsetTimestamp: new Date(new Date().getTime() + (noiseEvent.NoiseTimestampMinute*60000) + (noiseEvent.NoiseTimestampSeconds*1000))\n          });\n        }\n      });\n\n      setSummary({\n        quietBarks: quietBarks,\n        mediumBarks: mediumBarks,\n        loudBarks: loudBarks,\n        firstBarkTimeMinutes: firstBarkTimeMinutes,\n        firstBarkTimeSeconds: firstBarkTimeSeconds\n      });\n    }\n  }, [values]);\n\n  return (\n    <body>\n      <header>\n        { value &&\n          <span>\n            {`Device last started on ${value.toLocaleDateString('en-US', dateOptions)} at ${value.toLocaleTimeString('en-US')}`}\n          </span>\n        }\n      </header>\n      {\n        summary && \n        <Collapsible trigger={<StatsDropdownHeader dropdownOpen={dropdownOpen} />} open={dropdownOpen} handleTriggerClick={() => setDropdownOpen(!dropdownOpen)}>\n            <p>Baby Barks: {summary.quietBarks}</p>\n            <p>Barks: {summary.mediumBarks}</p>\n            <p>Big Boy Barks: {summary.loudBarks}</p>\n            <p>First noise detected after \n              {' ' + summary.firstBarkTimeMinutes + (summary.firstBarkTimeMinutes == 1 ? ' minute' : ' minutes')} and \n              {' ' + summary.firstBarkTimeSeconds} seconds\n            </p>\n            <p>It has been \n              {days ? days + ' days, ' : ''} {hours ? hours + ' hours, ' : ''} {minutes ? minutes + (minutes == 1 ? ' minute' : ' minutes') + ' and ' : ''} {seconds ? seconds + ' seconds' : ''} since last bark\n            </p>\n        </Collapsible>\n      }\n      <div className=\"body\">\n        <NoiseEventList values={values} loading={loading} error={error} startTime={value}/>\n      </div>\n    </body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}