{"version":3,"sources":["date-utils.js","NoiseEvent.js","moBounce2.gif","NoiseEventList.js","App.js","reportWebVitals.js","index.js"],"names":["formatTime","data","dataString","toString","getTimeDifference","startTime","timestampMinutes","timestampSeconds","timestampMillis","Date","getTime","NoiseEvent","props","isLoud","volume","isMedium","isQuiet","iconColor","text","timestampDate","className","style","display","flexDirection","paddingRight","paddingLeft","fontSize","alignItems","width","marginRight","icon","faExclamationCircle","color","fixedWidth","toLocaleTimeString","key","NoiseEventList","content","error","faFrown","loading","src","moBounce","height","marginTop","values","length","map","noiseEvent","index","LoudNoiseHappened","MediumNoiseHappened","QuietNoiseHappened","NoiseTimestampMinute","NoiseTimestampSecond","faSmileBeam","faQuestion","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","dateOptions","year","month","day","StatsDropdownHeader","cursor","justifyContent","boxShadow","dropdownOpen","faCaretUp","faCaretDown","App","useObjectVal","database","ref","transform","val","value","useListVals","React","useState","summary","setSummary","setDropdownOpen","useStopwatch","autoStart","seconds","minutes","hours","days","reset","useEffect","quietBarks","mediumBarks","loudBarks","firstBarkTimeMinutes","firstBarkTimeSeconds","noiseEventDate","millisSinceLastBark","toLocaleDateString","trigger","open","handleTriggerClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b884356c.chunk.js","sourcesContent":["function formatTime(data) {\n    let dataString = data.toString();\n\n    return dataString ?? null;\n}\n\nfunction getTimeDifference(startTime, timestampMinutes, timestampSeconds) {\n    const timestampMillis = (timestampMinutes*60000) + (timestampSeconds*1000);\n    return new Date(startTime.getTime() + timestampMillis);\n}\n\nexport {formatTime, getTimeDifference}","import './NoiseEvent.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\nimport {getTimeDifference} from './date-utils'\n\nfunction NoiseEvent(props) {\n    const isLoud = props.volume == 'loud';\n    const isMedium = props.volume == 'medium';\n    const isQuiet = props.volume == 'quiet';\n\n    const iconColor = isLoud ? 'red' : (isMedium ? 'yellow' : (isQuiet ? 'green' : ''));\n    const text = isLoud ? 'BIG BARK!' : (isMedium ? 'Bark' : (isQuiet ? 'baby bark' : ''));\n\n    const timestampDate = getTimeDifference(props.startTime, props.timestampMinutes, props.timestampSeconds);\n\n    return (\n      <div>\n        <div className=\"noise-event-container\" style={{display: 'flex', flexDirection: 'row', paddingRight: '1rem', paddingLeft: '1rem', fontSize: '0.75rem', alignItems: 'center'}}>\n          <div style={{display: 'flex', flexDirection: 'row', width: '33%', marginRight: '1rem'}}>\n            <FontAwesomeIcon icon={faExclamationCircle} style={{marginRight: '1rem', color: iconColor, fontSize: '1rem'}} fixedWidth/>\n            <span className=\"noise-event-text\">{text}</span>\n          </div>\n          <div key={props.key} style={{display: 'flex', flexDirection: 'column', width: '67%'}}>\n            <div>{'Occurred at ' + timestampDate.toLocaleTimeString('en-US') }</div>\n            <div>{'after ' + (props?.timestampMinutes > 1 ? props?.timestampMinutes + (props?.timestampMinutes == 1 ? ' minute' : ' minutes') + ' and ' : '') + props?.timestampSeconds + ' seconds'}</div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default NoiseEvent;\n","export default __webpack_public_path__ + \"static/media/moBounce2.b228a1dc.gif\";","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\nimport './NoiseEventList.css';\nimport NoiseEvent from './NoiseEvent.js'\nimport { faSmileBeam, faFrown, faHourglass, faQuestion } from '@fortawesome/free-solid-svg-icons'\nimport { useListVals } from 'react-firebase-hooks/database';\nimport moBounce from './moBounce2.gif'\nimport {formatTime} from './date-utils'\n\nfunction NoiseEventList(props) {\n  let content;\n  if (props.error) {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faFrown} className=\"big-icon\"/>\n        <h1>Something went wrong</h1>\n      </div>\n  } else if (props.loading) {\n    content = \n      <div className=\"message-container\">\n        <img src={moBounce} style={{height: '70px', width: '70px'}}></img>\n        <h2 style={{marginTop: '0'}}>Loading...</h2>\n      </div>\n  } else if (props.values && props.values.length > 0) {\n    content = \n      props.values?.map((noiseEvent, index) => { \n        const volume = noiseEvent.LoudNoiseHappened == 1 \n                        ? 'loud' \n                        : (\n                            noiseEvent.MediumNoiseHappened == 1\n                            ? 'medium' \n                            : (\n                              noiseEvent.QuietNoiseHappened == 1 ? 'quiet' : ''\n                              )\n                          );\n        return (\n          <NoiseEvent \n            key = {index}\n            volume={volume}\n            timestampMinutes={formatTime(noiseEvent.NoiseTimestampMinute)}\n            timestampSeconds={formatTime(noiseEvent.NoiseTimestampSecond)}\n            startTime={props.startTime}\n          />\n        )\n      });\n  } else if (props.values.length == 0) {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faSmileBeam} className=\"big-icon\"/>\n        <h1>Hooray!!</h1>\n        <span>No barks have happened yet</span>\n      </div>\n  } else {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faQuestion} className=\"big-icon\"/>\n        <h1>Not Sure</h1>\n        <span>This is embarassing... I don't know what to display</span>\n      </div>\n  }\n\n  return (\n    <div>\n      { content }\n    </div>\n  );\n}\n\nexport {NoiseEventList}\n","import React from 'react'\nimport firebase from 'firebase/app'\nimport \"firebase/database\"\nimport './App.css'\nimport './Button.css'\nimport { useListVals } from 'react-firebase-hooks/database';\nimport { useObjectVal } from 'react-firebase-hooks/database';\nimport Collapsible from 'react-collapsible';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport {NoiseEventList} from './NoiseEventList';\nimport {formatTime, getTimeDifference} from './date-utils'\nimport { useStopwatch } from 'react-timer-hook';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLYuScmM2f7tn458Ue9TiWVS5FnuCExfQ\",\n  authDomain: \"mo-watch.firebaseapp.com\",\n  databaseURL: \"https://mo-watch-default-rtdb.firebaseio.com\",\n  projectId: \"mo-watch\",\n  storageBucket: \"mo-watch.appspot.com\",\n  messagingSenderId: \"86065285680\",\n  appId: \"1:86065285680:web:eb770abf0d22044715bbf5\",\n  measurementId: \"G-TFCK2JPGGG\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst dateOptions = {year: 'numeric', month: 'long', day: 'numeric' };\n\nfunction StatsDropdownHeader(props) {\n  return (\n    <span style={{paddingLeft: '1rem', alignItems: 'center', height: '8vh', display: 'flex', cursor: 'pointer', justifyContent: 'space-between', boxShadow: '0px 0px 6px 0 #000'}}>\n      Stats\n      <FontAwesomeIcon icon={props.dropdownOpen ? faCaretUp : faCaretDown} style={{paddingRight: '1rem'}}/>\n    </span>\n  )\n}\n\nfunction App() {\n  const [value] = useObjectVal(\n    firebase.database().ref(\"/StartTime\"),\n    {\n      transform: (val) => (new Date(val))\n    }\n  );\n\n  const [values, loading, error] = useListVals(firebase.database().ref(\"/NoiseEvents\"));\n  const [summary, setSummary] = React.useState();\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    reset\n  } = useStopwatch({ \n      autoStart: true\n  });\n\n  React.useEffect(() => {\n    let quietBarks  = 0;\n    let mediumBarks = 0;\n    let loudBarks   = 0;\n    let firstBarkTimeMinutes = null;\n    let firstBarkTimeSeconds = null;\n\n    if (values?.length > 0) {\n      values?.map((noiseEvent, index) => { \n        if (noiseEvent.LoudNoiseHappened == 1) {\n          loudBarks++;\n        } \n        else if (noiseEvent.MediumNoiseHappened == 1) {\n          mediumBarks++;\n        }\n        else if (noiseEvent.QuietNoiseHappened == 1) {\n          quietBarks++;\n        }\n\n        if (index == 0) {\n          firstBarkTimeMinutes = formatTime(noiseEvent.NoiseTimestampMinute);\n          firstBarkTimeSeconds = formatTime(noiseEvent.NoiseTimestampSecond);\n        }\n\n        if (index == values.length - 1) {\n          const noiseEventDate = getTimeDifference(value, noiseEvent.NoiseTimestampMinute, noiseEvent.NoiseTimestampSecond);\n\n          const millisSinceLastBark = new Date().getTime() - noiseEventDate.getTime();\n\n          reset(new Date(new Date().getTime() + millisSinceLastBark));\n        }\n      });\n\n      setSummary({\n        quietBarks: quietBarks,\n        mediumBarks: mediumBarks,\n        loudBarks: loudBarks,\n        firstBarkTimeMinutes: firstBarkTimeMinutes,\n        firstBarkTimeSeconds: firstBarkTimeSeconds\n      });\n    }\n  }, [values]);\n\n  return (\n    <body>\n      <header>\n        { value &&\n          <>\n            <div>\n              {`Device started on ${value.toLocaleDateString('en-US', dateOptions)} at ${value.toLocaleTimeString('en-US')}`}\n            </div>\n            {\n              values.length > 0 &&\n              <div>It has been \n                {days ? days + ' days, ' : ''} {hours ? hours + ' hours, ' : ''} {minutes ? minutes + (minutes == 1 ? ' minute' : ' minutes') + ' and ' : ''} {seconds ? seconds : 0} seconds since last bark\n              </div>\n            }\n          </>\n        }\n      </header>\n      {\n        summary && \n        <Collapsible trigger={<StatsDropdownHeader dropdownOpen={dropdownOpen} />} open={dropdownOpen} handleTriggerClick={() => setDropdownOpen(!dropdownOpen)}>\n            <p>Baby Barks: {summary.quietBarks}</p>\n            <p>Barks: {summary.mediumBarks}</p>\n            <p>Big Boy Barks: {summary.loudBarks}</p>\n            <p>First noise detected after \n              {' ' + summary.firstBarkTimeMinutes + (summary.firstBarkTimeMinutes == 1 ? ' minute' : ' minutes')} and \n              {' ' + summary.firstBarkTimeSeconds} seconds\n            </p>\n        </Collapsible>\n      }\n      <div className=\"body\">\n        <NoiseEventList values={values} loading={loading} error={error} startTime={value}/>\n      </div>\n    </body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}