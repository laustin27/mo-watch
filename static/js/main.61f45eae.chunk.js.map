{"version":3,"sources":["NoiseEvent.js","NoiseEventList.js","App.js","reportWebVitals.js","index.js"],"names":["NoiseEvent","NoiseEventList","props","React","useState","noiseEvents","setNoiseEvents","firebase","database","ref","get","then","snap","Array","from","val","noiseEventList","isArray","map","noiseEvent","console","log","class","length","style","display","alignItems","flexDirection","marginTop","icon","faSmileBeam","fontSize","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","className","onClick","alert","faTrashAlt","paddingRight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAeeA,I,OC8BAC,MAvCf,SAAwBC,GACtB,MAAsCC,IAAMC,SAAS,IAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAEuBJ,EAAMK,SAASC,WAAWC,IAAI,gBAEtCC,MAAMC,MAAK,SAAAC,GAAI,OAAIN,EAAeO,MAAMC,KAAKF,EAAKG,WAEjE,IAAMC,EAAiBH,MAAMI,QAAQZ,GAAd,OACpBA,QADoB,IACpBA,OADoB,EACpBA,EAAaa,KAAI,SAACC,OAClB,KAeH,OAbAC,QAAQC,IAAI,eAAgBhB,GAc1B,qBAAKiB,MAAM,6BAAX,SACGN,GAAkBA,EAAeO,OAAS,EACvCP,EACA,sBAAKQ,MAAO,CAACC,QAAS,OAAQC,WAAY,SAAUC,cAAe,SAAUC,UAAW,QAAxF,UACE,cAAC,IAAD,CAAiBC,KAAMC,IAAaN,MAAO,CAACO,SAAU,UACtD,0CACA,oE,0BCfZxB,IAASyB,cAZc,CACrBC,OAAQ,0CACRC,WAAY,2BACZC,YAAa,+CACbC,UAAW,WACXC,cAAe,uBACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBA6BFC,MAvBf,WAKE,OACE,qCACE,iCAEE,sBAAMjB,MAAO,CAACI,UAAW,UAAzB,wBAEF,qBAAKc,UAAU,OAAf,SACE,cAAC,EAAD,CAAgBnC,SAAUA,QAE5B,iCACE,yBAAQoC,QAdd,WACEC,MAAM,sBAasBF,UAAU,UAAlC,UACE,cAAC,IAAD,CAAiBb,KAAMgB,IAAYrB,MAAO,CAACsB,aAAc,SAD3D,iBC3BOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.61f45eae.chunk.js","sourcesContent":["import './NoiseEvent.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons'\n\nfunction NoiseEvent(props) {\n    return (\n      <div className=\"noise-event-container\">\n        {/* <FontAwesomeIcon icon={faCoffee} /> */}\n        <span className=\"noise-event-text\">Bark!</span>\n        <span className=\"noise-event-start\">{props?.startTime}</span>\n        <span className=\"noise-event-end\">{props?.endTime}</span>\n      </div>\n    )\n}\n\nexport default NoiseEvent;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\nimport './NoiseEvent.css';\nimport NoiseEvent from './NoiseEvent.js'\nimport { faSmileBeam } from '@fortawesome/free-solid-svg-icons'\n\nfunction NoiseEventList(props) {\n  const [noiseEvents, setNoiseEvents] = React.useState([]);\n\n  const noiseEventsRef = props.firebase.database().ref(\"/NoiseEvents\");\n\n  noiseEventsRef.get().then(snap => setNoiseEvents(Array.from(snap.val())));\n\n  const noiseEventList = Array.isArray(noiseEvents)\n   ? noiseEvents?.map((noiseEvent) => { <NoiseEvent/> }) \n   : null;\n\n  console.log('noiseEvents1', noiseEvents);\n\n  // function addTestData() {\n  //   noiseEventsRef.push({\n  //     DurationMinutes: 1,\n  //     DurationSeconds: 6,\n  //     EndTimestampMinute : 3,\n  //     EndTimestampSecond : 56,\n  //     StartTimestampMinute : 2,\n  //     StartTimestampSecond: 50\n  //   });\n  // }\n  \n  return (\n    <div class=\"noise-event-list-container\">\n      {noiseEventList && noiseEventList.length > 0 \n        ? noiseEventList \n        : <div style={{display: 'flex', alignItems: 'center', flexDirection: 'column', marginTop: '5rem'}}>\n            <FontAwesomeIcon icon={faSmileBeam} style={{fontSize: '7rem'}}/>\n            <h1>Hooray!!</h1>\n            <span>No barks have happened yet</span>\n          </div>\n      }\n      {/* <button onClick={addTestData()}>Add Test Data</button> */}\n    </div>\n  );\n}\n\nexport default NoiseEventList;\n","import React from 'react'\nimport NoiseEventList from './NoiseEventList';\nimport firebase from 'firebase/app'\nimport \"firebase/database\"\nimport './App.css'\nimport './Button.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLYuScmM2f7tn458Ue9TiWVS5FnuCExfQ\",\n  authDomain: \"mo-watch.firebaseapp.com\",\n  databaseURL: \"https://mo-watch-default-rtdb.firebaseio.com\",\n  projectId: \"mo-watch\",\n  storageBucket: \"mo-watch.appspot.com\",\n  messagingSenderId: \"86065285680\",\n  appId: \"1:86065285680:web:eb770abf0d22044715bbf5\",\n  measurementId: \"G-TFCK2JPGGG\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  function clear() {\n    alert('clear coming soon');\n  }\n\n  return (\n    <>\n      <header>\n        {/* <img src={headerImg} /> */}\n        <span style={{marginTop: '0.5rem'}}>Mo Watch</span>\n      </header>\n      <div className=\"body\">\n        <NoiseEventList firebase={firebase}/>\n      </div>\n      <footer>\n        <button onClick={clear} className=\"primary\">\n          <FontAwesomeIcon icon={faTrashAlt} style={{paddingRight: '8px'}} />Clear\n          </button>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}