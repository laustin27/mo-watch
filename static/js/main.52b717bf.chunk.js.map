{"version":3,"sources":["NoiseEvent.js","moBounce2.gif","NoiseEventList.js","App.js","reportWebVitals.js","index.js"],"names":["NoiseEvent","props","isLoud","volume","isMedium","isQuiet","iconColor","text","className","style","display","flexDirection","justifyContent","fontSize","marginRight","alignItems","icon","faExclamationCircle","color","fixedWidth","startTime","endTime","duration","key","formatTime","data","dataString","toString","length","NoiseEventList","content","error","faFrown","loading","src","moBounce","height","width","marginTop","values","map","noiseEvent","index","LoudNoiseHappened","MediumNoiseHappened","QuietNoiseHappened","StartTimestampMinute","StartTimestampSecond","EndTimestampMinute","EndTimestampSecond","DurationMinutes","DurationSeconds","faSmileBeam","faQuestion","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","dateOptions","year","month","day","StatsDropdownHeader","paddingLeft","cursor","boxShadow","dropdownOpen","faCaretUp","faCaretDown","paddingRight","App","useObjectVal","database","ref","transform","val","Date","value","useListVals","React","useState","summary","setSummary","setDropdownOpen","useEffect","quietBarks","mediumBarks","loudBarks","firstBarkTime","toLocaleDateString","toLocaleTimeString","trigger","open","handleTriggerClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52b717bf.chunk.js","sourcesContent":["import './NoiseEvent.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\n\nfunction NoiseEvent(props) {\n    const isLoud = props.volume == 'loud';\n    const isMedium = props.volume == 'medium';\n    const isQuiet = props.volume == 'quiet';\n\n    const iconColor = isLoud ? 'red' : (isMedium ? 'yellow' : (isQuiet ? 'green' : ''));\n    const text = isLoud ? 'BIG BARK!' : (isMedium ? 'Bark' : (isQuiet ? 'baby bark' : ''));\n    return (\n      <div>\n        <div className=\"noise-event-container\" style={{display: 'flex', flexDirection: 'row', justifyContent: 'center', fontSize: '0.75rem'}}>\n          <div style={{display: 'flex', flexDirection: 'row', marginRight: '2rem', alignItems: 'center'}}>\n            <FontAwesomeIcon icon={faExclamationCircle} style={{marginRight: '1rem', color: iconColor, fontSize: '1rem'}} fixedWidth/>\n            <span className=\"noise-event-text\">{text}</span>\n          </div>\n          <div key={props.key} style={{display: 'flex', flexDirection: 'column'}}>\n            <span>{'From: ' + props?.startTime + ' - ' + props.endTime}</span>\n            <span>{'Duration: ' + props?.duration}</span>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default NoiseEvent;\n","export default __webpack_public_path__ + \"static/media/moBounce2.b228a1dc.gif\";","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\nimport './NoiseEventList.css';\nimport NoiseEvent from './NoiseEvent.js'\nimport { faSmileBeam, faFrown, faHourglass, faQuestion } from '@fortawesome/free-solid-svg-icons'\nimport { useListVals } from 'react-firebase-hooks/database';\nimport moBounce from './moBounce2.gif'\n\nfunction formatTime(data) {\n  let dataString = data.toString();\n\n  if (dataString) {\n    if (dataString.length == 1) {\n      return '0' + dataString;\n    }\n\n    return dataString;\n  }\n\n  return null;\n}\n\nfunction NoiseEventList(props) {\n  let content;\n  if (props.error) {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faFrown} className=\"big-icon\"/>\n        <h1>Something went wrong</h1>\n      </div>\n  } else if (props.loading) {\n    content = \n      <div className=\"message-container\">\n        <img src={moBounce} style={{height: '70px', width: '70px'}}></img>\n        <h2 style={{marginTop: '0'}}>Loading...</h2>\n      </div>\n  } else if (props.values && props.values.length > 0) {\n    content = \n      props.values?.map((noiseEvent, index) => { \n        const volume = noiseEvent.LoudNoiseHappened == 1 \n                        ? 'loud' \n                        : (\n                            noiseEvent.MediumNoiseHappened == 1\n                            ? 'medium' \n                            : (\n                              noiseEvent.QuietNoiseHappened == 1 ? 'quiet' : ''\n                              )\n                          );\n        return (\n          <NoiseEvent \n            key = {index}\n            volume={volume}\n            startTime={formatTime(noiseEvent.StartTimestampMinute) + ':' + formatTime(noiseEvent.StartTimestampSecond)}\n            endTime={formatTime(noiseEvent.EndTimestampMinute) + ':' + formatTime(noiseEvent.EndTimestampSecond)}\n            duration={formatTime(noiseEvent.DurationMinutes) + ':' + formatTime(noiseEvent.DurationSeconds)}\n          />\n        )\n      });\n  } else if (props.values.length == 0) {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faSmileBeam} className=\"big-icon\"/>\n        <h1>Hooray!!</h1>\n        <span>No barks have happened yet</span>\n      </div>\n  } else {\n    content = \n      <div className=\"message-container\">\n        <FontAwesomeIcon icon={faQuestion} className=\"big-icon\"/>\n        <h1>Not Sure</h1>\n        <span>This is embarassing... I don't know what to display</span>\n      </div>\n  }\n\n  return (\n    <div>\n      { content }\n    </div>\n  );\n}\n\nexport {formatTime, NoiseEventList}\n","import React from 'react'\nimport firebase from 'firebase/app'\nimport \"firebase/database\"\nimport './App.css'\nimport './Button.css'\nimport { useListVals } from 'react-firebase-hooks/database';\nimport { useObjectVal } from 'react-firebase-hooks/database';\nimport Collapsible from 'react-collapsible';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport {formatTime, NoiseEventList} from './NoiseEventList';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLYuScmM2f7tn458Ue9TiWVS5FnuCExfQ\",\n  authDomain: \"mo-watch.firebaseapp.com\",\n  databaseURL: \"https://mo-watch-default-rtdb.firebaseio.com\",\n  projectId: \"mo-watch\",\n  storageBucket: \"mo-watch.appspot.com\",\n  messagingSenderId: \"86065285680\",\n  appId: \"1:86065285680:web:eb770abf0d22044715bbf5\",\n  measurementId: \"G-TFCK2JPGGG\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst dateOptions = {year: 'numeric', month: 'long', day: 'numeric' };\n\nfunction StatsDropdownHeader(props) {\n  return (\n    <span style={{paddingLeft: '1rem', alignItems: 'center', height: '8vh', display: 'flex', cursor: 'pointer', justifyContent: 'space-between', boxShadow: '0px 0px 6px 0 #000'}}>\n      Click here for stats!!\n      <FontAwesomeIcon icon={props.dropdownOpen ? faCaretUp : faCaretDown} style={{paddingRight: '1rem'}}/>\n    </span>\n  )\n}\n\nfunction App() {\n  const [value] = useObjectVal(\n    firebase.database().ref(\"/StartTime\"),\n    {\n      transform: (val) => (new Date(val))\n    }\n  );\n\n  const [values, loading, error] = useListVals(firebase.database().ref(\"/NoiseEvents\"));\n  const [summary, setSummary] = React.useState();\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    let quietBarks  = 0;\n    let mediumBarks = 0;\n    let loudBarks   = 0;\n    let firstBarkTime = null;\n\n    if (values?.length > 0) {\n      values?.map((noiseEvent, index) => { \n        if (noiseEvent.LoudNoiseHappened == 1) {\n          loudBarks++;\n        } \n        else if (noiseEvent.MediumNoiseHappened == 1) {\n          mediumBarks++;\n        }\n        else if (noiseEvent.QuietNoiseHappened == 1) {\n          quietBarks++;\n        }\n\n        if (index == 0) {\n          firstBarkTime = formatTime(noiseEvent.StartTimestampMinute) + ':' + formatTime(noiseEvent.StartTimestampSecond);\n        }\n      });\n\n      setSummary({\n        quietBarks: quietBarks,\n        mediumBarks: mediumBarks,\n        loudBarks: loudBarks,\n        firstBarkTime: firstBarkTime\n      });\n    }\n  }, [values]);\n  return (\n    <body>\n      <header>\n        { value &&\n          <span>\n            {`Device last started on ${value.toLocaleDateString('en-US', dateOptions)} at ${value.toLocaleTimeString('en-US')}`}\n          </span>\n        }\n      </header>\n      {\n        summary && \n        <Collapsible trigger={<StatsDropdownHeader dropdownOpen={dropdownOpen} />} open={dropdownOpen} handleTriggerClick={() => setDropdownOpen(!dropdownOpen)}>\n            <p>Baby Barks: {summary.quietBarks}</p>\n            <p>Barks: {summary.mediumBarks}</p>\n            <p>Big Boy Barks: {summary.loudBarks}</p>\n            <p>First noise detected after {summary.firstBarkTime}</p>\n        </Collapsible>\n      }\n      <div className=\"body\">\n        <NoiseEventList values={values} loading={loading} error={error}/>\n      </div>\n    </body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}